Spring Boot:
============

1)
Displaying a message "Hi to Spring Boot" for the URL "/hi"
==========================================================

Maven Project Name: CustomerAPI

pom.xml:
========

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.ofss</groupId>
  <artifactId>CustomerAPI</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>Mahindra comviva Customer API</name>
  
  <parent>
  	<groupId>org.springframework.boot</groupId>
  	<artifactId>spring-boot-starter-parent</artifactId>
  	<version>1.4.2.RELEASE</version>
  </parent>
  
  <dependencies>
  <dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
  </dependency>
  </dependencies>
  
	<properties>
		<java-version>1.8</java-version>
	</properties>

</project>

CustomerAPIApp.java
====================

package com.ofss;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CustomerAPIApp {

	
	public static void main(String[] args) {
		SpringApplication.run(CustomerAPIApp.class, args);

	}

}


src/main/application.properties:
================================

server.port = 8088

HiController.java:
==================

package com.ofss;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HiController {
	@RequestMapping(method=RequestMethod.GET, value="/hi")
	public String m1()
	{
		return "Hi to Spring Boot";
	}
}
Steps to run:
=============

1. Right click the class CustomerAPIApp and run as application
2. Open the browser and type the URL

	http://localhost:8088/hi

It should print 'Hi to Spring Boot'



2) Returning list of Customer objects
======================================

Customer.java (POJO class):
============================

package com.ofss.customer;

public class Customer {
	String firstName;
	String lastName;
	long phoneNumber;
	String emailId;
	
	public Customer(String firstName, String lastName, long phoneNumber, String emailId) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNumber = phoneNumber;
		this.emailId = emailId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public long getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(long phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public String getEmailId() {
		return emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	
	
	
	
}

CustomerController.java:
=========================

package com.ofss.customer;

import java.util.Arrays;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.*;

@RestController
public class CustomerController {
	
	@RequestMapping("/customers")
	public List<Customer> getAllCustomers()
	{
		Customer c1=new Customer("Guru", "Murthy", 9731801675L, "java.guru@yahoo.com");
		Customer c2=new Customer("John", "Britto", 8351801675L, "john.britto@yahoo.com");
		Customer c3=new Customer("Odessa", "Lisburg", 7343480165L, "odessa.lisburg@oracle.com");
		Customer c4=new Customer("Nanditha", "Kumar", 9731829295L, "knanditha@yahoo.com");
		Customer c5=new Customer("Nital", "Shah", 9731801675L, "nital.shah@gmail.com");
		
		List<Customer> allCustomers=Arrays.asList(c1,c2,c3,c4,c5);
		return allCustomers;
				
		
	}

}


3) Implementing Service class:

CustomerService.java:
=====================

package com.ofss.services;

import java.util.Arrays;
import java.util.ArrayList;

import org.springframework.stereotype.Service;

import com.ofss.customer.Customer;

@Service
public class CustomerService {

	private Customer c1=new Customer("Guru", "Murthy", 9731801675L, "java.guru@yahoo.com");
	private Customer c2=new Customer("John", "Britto", 8351801675L, "john.britto@yahoo.com");
	private Customer c3=new Customer("Odessa", "Lisburg", 7343480165L, "odessa.lisburg@oracle.com");
	private Customer c4=new Customer("Nanditha", "Kumar", 9731829295L, "knanditha@yahoo.com");
	private Customer c5=new Customer("Nital", "Shah", 9731801675L, "nital.shah@gmail.com");
	
	private ArrayList<Customer> allCustomers=new ArrayList<Customer>();
	
	public CustomerService()
	{
		allCustomers.add(c1);
		allCustomers.add(c2);
		allCustomers.add(c3);
		allCustomers.add(c4);
		allCustomers.add(c5);
	}


	public List<Customer> getAllCustomers()
	{
		System.out.println("returing all customers from service class");
		return allCustomers;
	}
}


CustomerController.java:
========================

package com.ofss.customer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ofss.services.CustomerService;

import java.util.*;

@RestController
public class CustomerController {

	@Autowired
	CustomerService customerService;

	@RequestMapping("/customers")
	public List<Customer> getAllCustomers()
	{
		return customerService.getAllCustomers();
	}
}
	
4) Implementing getCustomer(Customer c) - getting a single resource

Add the following in CustomerController.java
============================================
	@RequestMapping("/customers/{name}")
	public Customer getCustomer(@PathVariable("name") String myname)
	{
		return customerService.getCustomer(myname);
	}

Add the following in CustomerService.java
=========================================

	public Customer getCustomer(String name)
	{
		Customer cust=null;
		for (Customer c:allCustomers)
		{
			if (c.getFirstName().equals(name))
				cust=c;
		}
		return cust;
	}

Run the application

5) How to create a new source - creating a single resource:
===========================================================

Add the following in CustomerController.java:
==============================================

	@RequestMapping(value="/customers", method=RequestMethod.POST)
	public void addCustomer(@RequestBody Customer cust)
	{
		customerService.addCustomer(cust);
	}

Add the following in CustomerService.java:
===========================================

public void addCustomer(Customer cust)
	{
		allCustomers.add(cust);
	}


In POSTMAN,

Give the URL: http://localhost:8088/customers
Select POST method

In request body, select raw:

Add the following JSON object:

 {
        
"firstName": "Raju",
        
"lastName": "Rama",
        
"phoneNumber": 123456243,
        
"emailId": "raju.rama@yahoo.com"
    
}

In the Headers, create one key:

Content-Type and give the value application/json


6) Updating a single resource:

Changing the lastname of "Murthy" to "Murthy sir"


Add the following method in CustomerController.java

@RequestMapping(value="/customers/{name}", method=RequestMethod.PUT)
	public void updateCustomer(@RequestBody Customer cust, @PathVariable("name") String customerName)
	{
		System.out.println("Update method controller");
		System.out.println("customer name is "+customerName);
		
		customerService.updateCustomer(customerName, cust);
	}	


Add the following method in CustomerService.java

public void updateCustomer(String customerName, Customer cust) {
		for (int i=0;i<allCustomers.size();i++)
		{
		
			if ((allCustomers.get(i)).getFirstName().equals(customerName))
			{
				System.out.println("Matching....");
				allCustomers.set(i, cust);
				return;
			}
			
		}
		
	}

In Postman:

URL: http://localhost:8088/customers/Guru
METHOD: PUT

JSON in Request body:

{"firstName":"Guru","lastName":"Murthy Sir","phoneNumber":9731801675,"emailId":"java.guru@yahoo.com"}

Headers:

Content-Type  is application/json

Verify:

URL: http://localhost:8088/customers
METHOD: GET

7) Deleting a single resource:

Delete the customer whose firstName is "Guru"


Add the following method in CustomerController.java

@RequestMapping(value="/customers/{name}", method=RequestMethod.DELETE)
	public void deleteCustomer(@PathVariable("name") String customerName)
	{
		System.out.println("DELETE method controller");
		System.out.println("customer name is "+customerName);
		
		customerService.deleteCustomer(customerName);
	}	
	
Add the following method in CustomerService.java

public void deleteCustomer(String customerName) {
		for (int i=0;i<allCustomers.size();i++)
		{
		
			if ((allCustomers.get(i)).getFirstName().equals(customerName))
			{
				System.out.println("Deleting....");
				allCustomers.remove(i);
				return;
			}
			
		}
		
	}

In Postman:

URL: http://localhost:8088/customers/Guru
METHOD: DELETE


Verify:

URL: http://localhost:8088/customers
METHOD: GET

